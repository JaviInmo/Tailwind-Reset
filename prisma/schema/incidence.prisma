model Incident {
  id                  Int                @id @default(autoincrement())
  date                DateTime
  provinceId          String
  province            Province           @relation(fields: [provinceId], references: [id])
  municipalityId      String
  municipality        Municipality       @relation(fields: [municipalityId], references: [id])
  variableId          Int
  variable            Variable           @relation(fields: [variableId], references: [id])
  categoryId          Int
  category            Category           @relation(fields: [categoryId], references: [id])
  subcategoryId       Int?
  subcategory         Subcategory?       @relation(fields: [subcategoryId], references: [id])
  secondSubcategoryId Int?
  secondSubcategory   SecondSubcategory? @relation(fields: [secondSubcategoryId], references: [id])
  numberOfPeople      Int?               // Number of people
  description         String
  title               String
  unitMeasures        IncidentUnitMeasure[] // New relation to unit measures
  items               IncidentItem[]     // Keep relation to incident items for backward compatibility

  @@map("incidencias")
}

// New model for incident-unit measure relationship
model IncidentUnitMeasure {
  id            Int         @id @default(autoincrement())
  incidentId    Int
  incident      Incident    @relation(fields: [incidentId], references: [id], onDelete: Cascade)
  unitMeasureId Int
  unitMeasure   UnitMeasure @relation(fields: [unitMeasureId], references: [id])

  @@unique([incidentId, unitMeasureId])
  @@map("incident_unit_measures")
}

// Keep the existing IncidentItem model for backward compatibility
model IncidentItem {
  id           Int          @id @default(autoincrement())
  productName  String       // Name of the product (e.g., "Sugar", "Chairs")
  quantity     Float        // Quantity (e.g., 20, 1)
  unitMeasureId Int?        // Optional unit of measure
  unitMeasure  UnitMeasure? @relation(fields: [unitMeasureId], references: [id])
  incidentId   Int          // Relation to the parent incident
  incident     Incident     @relation(fields: [incidentId], references: [id], onDelete: Cascade)

  @@map("incident_items")
}

model Variable {
  id         Int        @id @default(autoincrement())
  name       String
  categories Category[]
  incidents  Incident[]

  @@map("variables")
}

model Category {
  id            Int           @id @default(autoincrement())
  name          String
  variableId    Int
  variable      Variable      @relation(fields: [variableId], references: [id])
  subcategories Subcategory[]
  incidents     Incident[]

  @@map("categorias")
}

model Subcategory {
  id                  Int                 @id @default(autoincrement())
  name                String
  categoryId          Int
  category            Category            @relation(fields: [categoryId], references: [id])
  secondSubcategories SecondSubcategory[]
  incidents           Incident[]

  @@map("subcategorias")
}

model SecondSubcategory {
  id            Int         @id @default(autoincrement())
  name          String
  subcategoryId Int
  subcategory   Subcategory @relation(fields: [subcategoryId], references: [id])
  incidents     Incident[]

  @@map("secondsubcategorias")
}

model UnitMeasure {
  id                 Int                  @id @default(autoincrement())
  name               String               @unique
  incidentItems      IncidentItem[]       // Keep relation to IncidentItem for backward compatibility
  incidentUnitMeasures IncidentUnitMeasure[] // New relation to incidents
  
  @@map("unidades_medida")
}

// Keep Province and Municipality models only in this file
model Province {
  id             String         @id @default(cuid())
  name           String         @unique
  municipalities Municipality[]
  incidents      Incident[]     // Relation with Incident
  contacts       Contact[]      // Relation with Contact (renamed from Contact to contacts)

  @@map("provincias")
}

model Municipality {
  id         String     @id @default(cuid())
  name       String
  provinceId String
  province   Province   @relation(fields: [provinceId], references: [id])
  incidents  Incident[] // Relation with Incident
  contacts   Contact[]  // Relation with Contact (renamed from Contact to contacts)

  @@map("municipios")
}
